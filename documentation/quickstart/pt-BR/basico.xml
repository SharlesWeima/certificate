<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>

<chapter id="basico">
	<title>Criação da aplicação</title>
	
	<section>
		<title>Nossa primeira aplicação</title>
		<para>
			Nesta seção apresentaremos o passo-a-passo para construção de um projeto de exemplo do <emphasis>demoiselle-applet</emphasis>. 
			Nele será construída uma página html que executará a applet para assinatura de um documento usando certificados A1 ou A3 
			e apresentação das informações do certificado na própria página html.
		</para>
	</section>
	
	<section>
		<title>Criando sua Applet para exibir informações em uma página</title>
		<para>
			Crie um novo projeto Maven em branco, marcando a opção "Create a Simple Project" e atribuido os valores:
		</para>
<programlisting role="HTML" ><![CDATA[
Group-id: XPTO
Artifact-id: XPTO
Packaging: JAR
]]></programlisting>
		<para>	
			Após criada a aplicação adicione como dependência o componente <literal>demoiselle-certificate-applet</literal>: 
		</para>	
        <programlisting role="XML"><![CDATA[<dependency>
	<groupId>br.gov.frameworkdemoiselle.component</groupId>
	<artifactId>demoiselle-certificate-applet</artifactId>
	<version>2.0.0</version>
</dependency>]]></programlisting>			
		<para>
			Em seguida crie um classe <literal>App.java</literal> no pacote <literal>XPTO</literal>, estendendo a classe <literal>AbstractAppletExecute</literal>.
		</para>
		
		<programlisting role="JAVA" ><![CDATA[
public class App extends AbstractAppletExecute {

	@Override
	public void execute(KeyStore keystore, String alias, int policyselected, Applet applet) {
		try {
			/* Exibe alguns dados do certificado */
			ICPBrasilCertificate certificado = super.getICPBrasilCertificate(keystore, alias, false);
			AbstractAppletExecute.setFormField(applet, "mainForm", "cpf", certificado.getCpf());
			AbstractAppletExecute.setFormField(applet, "mainForm", "nome", certificado.getNome());
			AbstractAppletExecute.setFormField(applet, "mainForm", "nascimento", certificado.getDataNascimento());
			AbstractAppletExecute.setFormField(applet, "mainForm", "email",	certificado.getEmail());

		} catch (KeyStoreException e) {
			JOptionPane.showMessageDialog(applet, e.getMessage(), "Error",	JOptionPane.ERROR_MESSAGE);
		}
	}

	@Override
	public void cancel(KeyStore keystore, String alias, int policyselected,	Applet applet) {
		/* Seu codigo customizado aqui... */
	}
}]]></programlisting>
		
        <para>
            No código acima o método <literal>execute</literal> será acionado logo após o carregamento do keystore do usuário. O método <literal>getICPBrasilCertificate</literal>
            retorna um objeto do tipo ICPBrasilCertificate que possui todas as informações de um certificado ICPBrasil.
        </para>

        <para>
            Os métodos
            <literal>setFormField</literal>
            escrevem no formulário html chamado de mainForm no qual a applet está sendo executado. O terceiro parâmetro do método informa em
            qual campo do formulário a informação será registrada.
        </para>
        <para>
            O método
            <literal>cancel</literal>
            pode ser utilizado para implementar uma ação no caso do usuário desistir da ação. No código de exemplo é feito apenas a ocultação da applet.
        </para>		
	</section>

    <section>
        <title>Assinatura dos jars</title>

        <para>
        	O modelo de segurança da plataforma Java é centrado sobre o conceito de sandbox (caixa de areia), 
        	no qual um código remoto como um applet por padrão não é confiável e, portanto, não pode ter acesso ilimitado ao Sistema Operacional. 
       		Para que possamos executar nossa applet, precisamos assinar todos assinar todos os jar necessários a execução da applet, conforme mostrado na tabela abaixo:
        </para>
        
        <table frame="all" pgwide="1">
            <title>Lista dos jars assinados</title>
            <tgroup colsep="1" cols="2">
                <colspec colnum="1" colname="c0" />
                <colspec colnum="2" colname="c1" />
                <thead>
                    <row>
                        <entry>Jar Original</entry>
                        <entry>Jar Assinado</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>demoiselle-certificate-applet-customizada-1.0.0.jar</entry>
                        <entry>demoiselle-certificate-applet-customizada-1.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-applet-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-applet-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-core-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-core-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-signer-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-signer-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-policy-engine-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-policy-engine-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-timestamp-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-timestamp-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-criptography-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-criptography-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-ca-icpbrasil-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-ca-icpbrasil-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>demoiselle-certificate-ca-icpbrasil-homologacao-2.0.0.jar</entry>
                        <entry>demoiselle-certificate-ca-icpbrasil-homologacao-2.0.0-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>bcprov-jdk15on-1.51.jar</entry>
                        <entry>bcprov-jdk15on-1.51-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>bcpkix-jdk15on-1.51.jar</entry>
                        <entry>bcpkix-jdk15on-1.51-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>bcmail-jdk15on-1.51.jar</entry>
                        <entry>bcmail-jdk15on-1.51-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>log4j-1.2.17.jar</entry>
                        <entry>log4j-1.2.17-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>slf4j-api-1.6.1.jar</entry>
                        <entry>slf4j-api-1.6.1-assinado.jar</entry>
                    </row>
                    <row>
                        <entry>slf4j-log4j12-1.6.1.jar</entry>
                        <entry>slf4j-log4j12-1.6.1-assinado.jar</entry>
                    </row>
                    <row>
                        <entry></entry>
                        <entry>plugin-assinado.jar</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>
            Para mais detalhes sobre os procedimentos para assinatura dos artefatos, 
            consulte a documentação de referência <link linkend="sas">XPTO</link>
        </para>

    </section>

	<section>
		<title>Projeto Web Exemplo</title>
		<para>
			Crie um novo projeto Maven em branco, marcando a opção "Create a Simple Project" e atribuido os valores:
		</para>
<programlisting role="HTML" ><![CDATA[
Group-id: XPTO
Artifact-id: XPTO
Packaging: WAR
]]></programlisting>
		
		<para>
			Adicione a página HTML que irá executar a applet.
		</para>
        <programlisting role="HTML"><![CDATA[<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link href="/demoiselle-certificate-applet-customizada-web/resources/styles/default.css" rel="stylesheet" type="text/css"/>
        <title>Projeto Exemplo</title>
    </head>

    <script type="text/javascript">
        function foo() {
            alert("foo() method called!");
        }
    </script>

    <body>
        <form id="mainForm" name="mainForm" method="post" action="">
            <table>
                <tr>
                    <td><h1>Applet Exemplo de Assinatura Digital</h1></td>
                </tr>
                <tr>
                    <td>
                        <applet codebase="http://10.32.180.96:8080/demoiselle-certificate-applet-customizada-web/"
                                code="br.gov.frameworkdemoiselle.certificate.applet.view.JPanelApplet" width=480 height=350 MAYSCRIPT
                                archive="demoiselle-certificate-applet-customizada-1.0.0-assinado.jar,
                                demoiselle-certificate-applet-2.0.0-assinado.jar,
                                demoiselle-certificate-core-2.0.0-assinado.jar,
                                demoiselle-certificate-signer-2.0.0-assinado.jar,
                                demoiselle-certificate-policy-engine-2.0.0-assinado.jar,
                                demoiselle-certificate-timestamp-2.0.0-assinado.jar,
                                demoiselle-certificate-criptography-2.0.0-assinado.jar,
                                demoiselle-certificate-ca-icpbrasil-2.0.0-assinado.jar,
                                demoiselle-certificate-ca-icpbrasil-homologacao-2.0.0-assinado.jar,
                                bcprov-jdk15on-1.51-assinado.jar,
                                bcpkix-jdk15on-1.51-assinado.jar,
                                bcmail-jdk15on-1.51-assinado.jar,
                                log4j-1.2.17-assinado.jar,
                                slf4j-api-1.6.1-assinado.jar,
                                slf4j-log4j12-1.6.1-assinado.jar,
                                plugin-assinado.jar">

                            <param name="factory.applet.action" value="br.gov.frameworkdemoiselle.App" />
                            <param name="applet.javascript.postaction.failure" value="foo" />
                            No Applet
                        </applet>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table width="100%">
                            <tr>
                                <th colspan="2">Escolha o arquivo a ser assinado</th>
                            </tr>
                            <tr>
                                <td>Documento:</td>
                                <td><input type="file" name="documento" value=""></td>
                            </tr>
                            <tr>
                                <th colspan="2">Dados extraídos do certificado digital</th>
                            </tr>ar
                            <tr>
                                <td>CPF:</td>
                                <td><input type="text" name="cpf" value="" size="11" disabled="true"></td>
                            </tr>
                            <tr>
                                <td >Nome:</td>
                                <td><input type="text" name="nome" value="" size="30" disabled="true"></td>
                            </tr>
                            <tr>
                                <td >Email:</td>
                                <td><input type="text" name="email" value="" size="30" disabled="true"></td>
                            </tr>
                            <tr>
                                <td >Nascimento:</td>
                                <td><input type="text" name="nascimento" value="" size="8" disabled="true"></td>
                            </tr>
                        </table>
                </tr>
            </table>
        </form>
    </body>ar
</html>]]></programlisting>

		<para>
       		Para funcionamento da applet é necessário as propiedades:              
                <literal>factory.applet.action</literal>, que define qual classe será instanciada no momento do clique do botão Ok e carregamento do Keystore do usuário, e a
                <literal>applet.javascript.postaction.failure</literal>, que define qual método JavaScript deverá ser chamado. 
        </para>
		<para>
			O seu projeto ficará com a seguinte estrutura de diretórios: 
		</para>

      <programlisting role="JAVA"><![CDATA[
      certificate-exemplo-web.war
	|-- webapp
	|	|-- applet.html
	|	|-- XPTO-assinado.jar  
 	|	|-- WEB-INF
	|		|-- web.xml
   ]]></programlisting>

	</section>

	<section>
		<title> Assinando um documento	</title>
	 	<para>
			Para realizar assinatura digital do contéudo, utilizamos o componente demoiselle-certificate-signer 
			que assina um conteúdo carregado no applet usando o certificado digital carregado pela appplet.
		</para>
		
		<para>
			Para isso vamos adicionar a dependência no pom.xml do projeto XPTO.jar. 
		</para>
        <programlisting role="XML"><![CDATA[<dependency>
	<groupId>br.gov.frameworkdemoiselle.component</groupId>
	<artifactId>demoiselle-certificate-signer</artifactId>
	<version>2.0.0</version>
</dependency>]]></programlisting>			

		<para>
			Para assinatura de documentos é necessário criar um objeto <literal>PKCS7Singer</literal>, setar os atributos 
			e chamar o método <literal>doSign()</literal>:
		</para>	
        <programlisting role="JAVA"><![CDATA[PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();
signer.setCertificates(keystore.getCertificateChain(alias));
signer.setPrivateKey((PrivateKey) keystore.getKey(alias, null));
signer.setSignaturePolicy(PolicyFactory.Policies.AD_RB_CADES_2_1); 
byte[] signed = signer.doSign(content);]]></programlisting>	

		<para>
			Abaixo segue como ficará nosso código completo.
		</para>
       	<programlisting role="JAVA" ><![CDATA[

public class App extends AbstractAppletExecute {

    private static final Logger logger = LoggerFactory.getLogger(App.class);

    @Override
    public void execute(KeyStore keystore, String alias, int policyselected, Applet applet) {
        try {
            /* Carregando o conteudo a ser assinado */
            String documento = AbstractAppletExecute.getFormField(applet, "mainForm", "documento");

            if (documento.length() == 0) {
                JOptionPane.showMessageDialog(applet, "Por favor, escolha um documento para assinar", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String user_home = System.getProperty("user.home");
            logger.info("user.home......: {}", user_home);
            String path = new File(documento).getAbsolutePath(AD_RB_CADES_2_1);
            logger.info("Path...........: {}", path);
            byte[] content = readContent(path);

            /* Parametrizando o objeto doSign */
            PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();
            signer.setCertificates(keystore.getCertificateChain(alias));
            signer.setPrivateKey((PrivateKey) keystore.getKey(alias, null));

            switch (policyselected) {
                case 0: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RB_CADES_1_0);
                    break;
                }
                case 1: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RB_CADES_1_1);
                    break;
                }
                case 2: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RB_CADES_2_0);
                    break;
                }
                case 3: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RB_CADES_2_1);
                    break;
                }
                case 4: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RT_CADES_1_0);
                    break;
                }
                case 5: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RT_CADES_1_1);
                    break;
                }
                case 6: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RT_CADES_2_0);
                    break;
                }
                case 7: {
                    signer.setSignaturePolicy(PolicyFactory.Policies.AD_RT_CADES_2_1);
                    break;
                }
            }

            signer.setAttached(true);

            /* Realiza a assinatura do conteudo */
            logger.info("Efetuando a  assinatura do conteudo");
            byte[] signed = signer.doSign(content);

            /* Grava o conteudo assinado no disco */
            writeContent(signed, documento.concat(".p7s"));

            /* Valida o conteudo */
            logger.info("Efetuando a validacao da assinatura.");
            boolean checked = signer.check(content, signed);

            if (checked) {ja usado, é ne
                logger.info("A assinatura e valida.");
                JOptionPane.showMessageDialog(applet, "O arquivo foi assinado e validado com sucesso.", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            } else {
                logger.info("A assinatura nao e valida!");
            }

            /* Exibe alguns dados do certificado */
            ICPBrasilCertificate certificado = super.getICPBrasilCertificate(keystore, alias, false);
            AbstractAppletExecute.setFormField(applet, "mainForm", "cpf", certificado.getCpf());
            AbstractAppletExecute.setFormField(applet, "mainForm", "nome", certificado.getNome());
            AbstractAppletExecute.setFormField(applet, "mainForm", "nascimento", certificado.getDataNascimento());
            AbstractAppletExecute.setFormField(applet, "mainForm", "email", certificado.getEmail());

        } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException e) {
            JOptionPane.showMessageDialog(applet, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            logger.info("Efetuando logout no provider.");
            AuthProvider ap = null;

            if (keystore != null) {
                ap = (AuthProvider) keystore.getProvider();
            }

            if (ap != null) {
                try {
                    ap.logout();
                } catch (LoginException e) {
                    JOptionPane.showMessageDialog(applet, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    @Override
    public void cancel(KeyStore keystore, String alias, int policyselected, Applet applet) {
        /* Seu codigo customizado aqui... */
    }

    private byte[] readContent(String arquivo) {
        byte[] result = null;
        try {
            File file = new File(arquivo);
            FileInputStream is = new FileInputStream(file);
            result = new byte[(int) file.length()];
            is.read(result);
            is.close();

        } catch (IOException ex) {
            logger.info(ex.getMessage());
        }
        return result;
    }

    private void writeContent(byte[] conteudo, String arquivo) {
        try {
            File file = new File(arquivo);
            FileOutputStream os = new FileOutputStream(file);
            os.write(conteudo);
            os.flush();
            os.close();
        } catch (IOException ex) {
            logger.info(ex.getMessage());
        }
    }
}
}]]></programlisting>



	</section>

	<section>
		<title>Executando o Applet</title>
 		<para>
         Após publicação em seu servidor WEB. 
         Abra seu navegador na url na qual foi publicado os arquivos. Neste exemplo seria http://localhost:8080/certificate-exemplo. Se o certificado
            digital necessitar do pin para que seja feito o acesso, a aplicação solicitará imediatamente o pin de seu certificado, conforme a tela abaixo:
        </para>

        <para>
            <figure>
                <title>
                    Solicitação de Pin do Certificado
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/tela02.png" format="PNG" align="center" scalefit="1" width="75%"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            O componente exibirá uma tela com os certificados disponíveis, seu número de série, sua data inicial de validade, sua data final de validade e o emissor deste certificado, fornecendo ao
            usuário a possibilidade de escolher qual certificado deseja-se utilizar.
        </para>
        <para>
            <figure>
                <title>
                    Lista com certificado de usuário
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/tela03.png" format="PNG" align="center" scalefit="1" width="75%"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
</section>



</chapter>

<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="desktop-modelo">

    <title>Modelo de aplicação Java Web Start</title>
    <para>
		Segue abaixo um modelo para aplicação Java Web Start utilizano serviços REST para comunicação com o servidor de aplicação.
    </para>
    
    <para>
        <figure>
            <title>
                Aplicação Web 
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/assinador_1.png" format="PNG" align="center" scalefit="1" width="75%"/>
                </imageobject>
            </mediaobject>
        </figure>
    </para>
    
    <procedure>
	    <step><para>O usuário escolhe os arquivos que deseja assinar.</para></step>
	    <step><para>O usuário clica no botão *assinar*, que dispara uma requisição para baixar o JNLP.</para></step>
	    <step><para>A requisição deve conter as identificações dos arquivos selecionados, os quais devem trafegar dentro do corpo da requisição numa conexão segura. Jamais deve-se trafegar as identificações na URL. Recomenda-se fazer uma requisição POST via HTTPS. Recomenda-se usar o formato JSON, passando as identificações como *arrays*. Definir o cabeçalho *Content-Type: application/json*.</para></step>
	    <step><para>O serviço (ou página dinâmica) deve recuperar as identificações dos arquivos no corpo da requisição, criar uma chave única e seguro (**Token**) e associar as identificações à chave de forma persistente.</para></step>
	    <step><para>O serviço (ou página dinâmica) deve criar um novo arquivo JNLP contendo no seu corpo o **Token** criado e uma **URL** fixa que auxiliará o assinador a recuperar os arquivos e a submeter as assinaturas posteriormente. Por questões de segurança esta URL não deve conter tokens, nem chaves, nem identificadores de sessão.</para></step>
	    <step><para>O serviço (ou página dinâmica) devolve a resposta com o status *HTTP 200* contendo o arquivo JNLP no corpo e no cabeçalho o *Content-Type: application/x-java-jnlp-file*.</para></step>
    </procedure>
    
    <para>
        <figure>
            <title>
                Aplicação Web
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/assinador_2.png" format="PNG" align="center" scalefit="1" width="75%"/>
                </imageobject>
            </mediaobject>
        </figure>
    </para>
        
    <para>
    Enquanto o proceso de assinatura ocorre em paralelo, recomenda-se que a aplicação Web fique em estado de espera. De tempos em tempos, ou via notificação do servidor, a tela deve verificar o status do processo de assinatura para desbloquear a tela apresentando uma mensagem de sucesso ou de falha para o usuário.
    </para>
    
    <para>
        <figure>
            <title>Aplicação Java SE</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/assinador_3.png" format="PNG" align="center" scalefit="1" width="75%"/>
                </imageobject>
            </mediaobject>
        </figure>
    </para> 
    
    <procedure>
    	<step><para>Após o download da aplicação Java SE, o usuário deve executá-la (ou ela deve executar automaticamente). Durante o processo de inicialização, a aplicação deve acessar a URL auxiliar definida nos atributos do JNLP para obter os arquivos.</para></step>
    	<step><para>A aplicação deve disparar uma requisição GET via HTTPS para a URL informando o Token, ambos obtidos nos atributos do JNLP. O Token deve ser passado no cabeçalho Authorization: TOKEN Token. Por questões de segurança, NUNCA trafegue o Token na URL. Definir o cabeçalho Accept: application/zip.</para></step>
    	<step><para>Ao receber a requisiçao, o serviço (ou página dinâmica) que responde pela URL deve resgatar da base os arquivos associados ao Token.</para></step>
    	<step><para>O serviço (ou página dinâmica) devolve a resposta com o status HTTP 200 contendo os arquivos zipados no corpo. No cabeçalho deve conter Content-Type: application/zip. Os arquivos a serem assinados devem estar agrupados na raiz do ZIP. Fica a critério do projeto definir se os arquivos que compõem o ZIP serão os arquivos originais ou apenas os seus hashs.</para></step>
    	<step><para>Ao final da requisição, a aplicação descompacta o arquivo ZIP para obter os arquivos a serem assinados. Recomenda-se exibir para o usuário o nome dos arquivos que serão assinados.</para></step>
    	<step><para>O processo de assinatura tem início de forma automática, disparando todos os passos da interação com o usuário para obter o certificado digital e proceder com a assinatura propriamente dita.</para></step>
    	<step><para>Após a conclusão do processo de assinatura, a aplicação deve fazer uma requisição POST via HTTPS para a URL informando o Token no cabeçalho Authorization: TOKEN Token e as assinaturas zipadas no corpo. Os arquivos a serem assinados devem estar agrupados na raiz do ZIP. No cabeçalho da requisição deve conter também Content-Type: application/zip.</para></step>
    	<step><para>Ao receber a requisiçao, o serviço (ou página dinâmica) deve resgatar da base os arquivos associados ao Token, verificar se a assinatura corresponde ao arquivo no servidor, guarda a assinatura na base de dados associando-as aos arquivos originais, desassocia o Token dos arquivos e descarta o Token.</para></step>
    	<step><para>O serviço (ou página dinâmica) devolve a resposta com o status HTTP 204 e a aplicação cliente se encerra.</para></step>
    </procedure>
    
</chapter>
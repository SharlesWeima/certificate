<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>

<chapter id="signer-funcionalidades">

    <title>Funcionalidades</title>
    <para>
        Este componente provê mecanismos de assinatura digital baseado nas normas ICP-Brasil e implementa mecanismos de assinatura digital em dois formatos: PKCS1 e
        PKCS7. A maior diferença entre esses dois mecanismos está na forma de envelopamento da assinatura digital, onde o PKCS1 não possui um formato de envelope,
        sendo o resultado da operação de assinatura a própria assinatura, já o PKCS7 possui um formato de retorno que pode ser binário (especificado na RFC5126) ou XML.
        A interface <package>br.gov.frameworkdemoiselle.certificate.signer.Signer</package> especifica o comportamento padrão dos mecanismos de assinatura digital.
        O componente especializa essa interface em mais duas, são elas:

        <itemizedlist>
            <listitem>
                <para>
                    <package>br.gov.frameworkdemoiselle.certificate.signer.pkcs1.PKCS1Signer</package> para implementações de mecanismos PKCS1
                </para>
            </listitem>
            <listitem>
                <para>
                    <package>br.gov.frameworkdemoiselle.certificate.signer.pkcs7.PKCS7Signer</package> para implementações de mecanismos de
                    envelopamento PKCS7
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Este componente, até a presente versão, permite assinar dados representados por um array de bytes. Então, para a a assinatura de um arquivo, por exemplo,
        a aplicação deverá montar um array de bytes com o conteúdo do arquivo para efetuar a assinatura digital.
    </para>

    <para>
        Para assinar um dado através do componente demoiselle-signer é preciso executar alguns passos.
        <itemizedlist>
            <listitem>
                Ter um conteúdo a ser assinado
            </listitem>
            <listitem>
                Escolher qual formato de assinatura a ser utilizado PKCS1 ou PKCS7
            </listitem>
            <listitem>
                Fabricar o objeto responsável pela implementação do formato escolhido
            </listitem>
            <listitem>
                Passar algumas informações para o objeto fabricado como chave criptográfica, algoritmo, etc, no caso do formato PKCS1. O formato PKCS7 obtêm estas informações
                através da política de assinatura especificada.
            </listitem>
            <listitem>
                Assinar o conteúdo
            </listitem>
        </itemizedlist>
    </para>

    <section>
        <title>Assinatura Digital no Formato PKCS1</title>
        <para>
            A seguir temos um fragmento de código que demonstra uma assinatura no formato PKCS1.
        </para>

        <programlisting role="JAVA" language="JAVA"><![CDATA[/* conteudo a ser assinado */
byte[] content = "Hello World!".getBytes();

/* chave privada */
PrivateKey chavePrivada = (PrivateKey) keystore.getKey(alias, null);

/* construindo um objeto PKCS1Signer atraves da fabrica */
PKCS1Signer signer = PKCS1Factory.getInstance().factory();

/* Configurando o algoritmo */
signer.setAlgorithm(SignerAlgorithmEnum.SHA1withRSA);

/* Configurando a chave privada */
signer.setPrivateKey(chavePrivada);

/* Assinando um conjunto de bytes */
byte[] sign = signer.signer(content);]]></programlisting>

    </section>

    <section>
        <title>Assinatura Digital no Formato PKCS7</title>
        <para>
            O formato PKCS7 permite colocar diversas informações no pacote gerado que serão úteis posteriormente para validar a assinatura. A ICP-Brasil define um conjunto
            de atributos que contém estas informações para as assinaturas digitais.  O componente <emphasis>demoiselle-certificate-signer</emphasis> monta o pacote com os
            atributos exigidos de acordo com a política escolhida. Então, para montar um PKCS7 padrão ICP-Brasil é necessário informar ao objeto PKCS7Signer qual a política de assinatura a ser aplicada.
        </para>

        <para>
            A seguir temos um fragmento de código que demonstra a utilização do pacote PKCS7 padrão.
        </para>

        <programlisting role="JAVA"><![CDATA[
byte[] content = readContent("texto.txt"); /* implementar metodo de leitura de arquivo */
PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();
signer.setCertificate(certificate);
signer.setPrivateKey(privateKey);
byte[] sign = signer.signer(this.content);]]></programlisting>

        <important>
            <para>
                Caso não seja especificada nenhuma política, o componente assumirá a Política de Assinatura de Referência Básica 2.1.
            </para>
        </important>

        <para>
            A seguir temos um fragmento de código que demonstra a utilização do pacote PKCS7 com informação da política de assinatura. Neste caso podemos escolher uma das
            políticas que já acompanham o componente. Atualmente o componente suporta as política de assinatura listadas abaixo:
        </para>
        <itemizedlist>
            <listitem>
                <literal>AD_RB_CADES_1_0</literal>, Refere-se à Assinatura Digital de Referência Básica versão 1.0;
            </listitem>
            <listitem>
                <literal>AD_RB_CADES_1_1</literal>, Refere-se à Assinatura Digital de Referência Básica versão 1.1;
            </listitem>
            <listitem>
                <literal>AD_RB_CADES_2_0</literal>, Refere-se à Assinatura Digital de Referência Básica versão 2.0;
            </listitem>
            <listitem>
                <literal>AD_RB_CADES_2_1</literal>, Refere-se à Assinatura Digital de Referência Básica versão 2.1;
            </listitem>
            <listitem>
                <literal>AD_RT_CADES_1_0</literal>, Refere-se à Assinatura Digital de Referência Temporal versão 1.0;
            </listitem>
            <listitem>
                <literal>AD_RT_CADES_1_1</literal>, Refere-se à Assinatura Digital de Referência Temporal versão 1.1;
            </listitem>
            <listitem>
                <literal>AD_RT_CADES_2_0</literal>, Refere-se à Assinatura Digital de Referência Temporal versão 2.0;
            </listitem>
            <listitem>
                <literal>AD_RT_CADES_2_1</literal>, Refere-se à Assinatura Digital de Referência Temporal versão 2.1;
            </listitem>
        </itemizedlist>

        <programlisting role="JAVA"><![CDATA[
byte[] content = readContent("texto.txt"); /* implementar metodo de leitura de arquivo */
PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();
signer.setCertificates(keystore.getCertificateChain(alias));
signer.setPrivateKey((PrivateKey) keystore.getKey(alias, null));
signer.setSignaturePolicy(PolicyFactory.Policies.AD_RB_CADES_2_1);
byte[] signed = signer.doSign(content);]]></programlisting>
    </section>

    <section>

        <title>
            Validação de assinatura PKCS7 sem o conteúdo anexado
        </title>

        <para>
            Para validar uma assinatura sem o conteúdo anexado no pacote, precisamos efetuar o carregamento do arquivo original e passá-lo para a verificação. A seguir temos
            um fragmento de código que demonstra a validação uma assinatura PKCS7 sem o conteúdo anexado.
        </para>


        <programlisting role="JAVA"><![CDATA[
byte[] content = readContent("texto.txt"); /* implementar metodo de leitura de arquivo */
byte[] signed = readContent("texto.pkcs7"); /* implementar metodo de leitura de arquivo */
PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();
boolean checked = signer.check(content, signed);]]></programlisting>

    </section>

    <section>

        <title>
            Validação de assinatura PKCS7 com o conteúdo anexado
        </title>

        <para>
            Para validar uma assinatura que já possui o conteúdo anexado no pacote, bastar passarmos <code>null</code> no parâmetro do conteúdo original. O componente, ao
            identificar que não foi passado nenhum conteúdo do arquivo original, tentará então extrair do pacote  PKCS7. A seguir temos um fragmento de código que demonstra a
            validação uma assinatura PKCS7 com o conteúdo anexado.
        </para>

        <programlisting role="JAVA"><![CDATA[
byte[] signed = readContent("texto.pkcs7"); /* implementar metodo de leitura de arquivo */
PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();
/* O componente ira detectar se o conteudo original esta anexado */
boolean checked = signer.check(null, signed);]]></programlisting>

    </section>

    <section>

        <title>
            Leitura do conteúdo anexado a uma assinatura PKCS7
        </title>

        <para>
            A seguir temos um fragmento de código que demonstra a recuperação do conteúdo de um arquivo anexado a uma assinatura PKCS7. O método permite obter o conteúdo
            fazendo simultâneamente a validação da assinatura, se for necessário.
        </para>

        <programlisting role="JAVA"><![CDATA[
byte[] signed = readContent("texto.pkcs7"); /* implementar metodo de leitura de arquivo */
PKCS7Signer signer = PKCS7Factory.getInstance().factoryDefault();

/* Para extrair o conteudo original validando a assinatura */
byte[] content = signer.getAttached(signed, true);

/* Para extrair o conteudo original sem validar a assinatura */
byte[] content = signer.getAttached(signed, false);]]></programlisting>

    </section>
</chapter>

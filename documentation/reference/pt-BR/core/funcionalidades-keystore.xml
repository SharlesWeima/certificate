<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="keystore-funcionalidades">

    <title id="funcionalidades">Funcionalidades relativas ao Keystore</title>


    <section>
        <title>Introdução</title>
        <para>
            A RSA Laboratories definiu algumas especificações de uso de criptografia e assinatura digital conhecidas pelo prefixo PKCS. Duas delas estão relacionadas a keystore. São elas PKCS#11 e PKCS#12.
        </para>

        <para>
            PKCS#11 define uma API genérica para acesso a hardware criptográfico, comumente chamados de Token ou Smartcard.
        </para>

        <para>
            PKCS#12 define um formato de arquivo usado para guardar chaves privadas acompanhadas de seus certificados digitais e protegidos por meio de senha.
        </para>

        <para>
            A linguagem Java suporta a utilização desses formatos e com isso define o que chamamos de KeyStore. Um KeyStore é usado para armazenar um ou mais certificados digitais
            e também par de chaves, com isso é possível utilizar os padrões da RSA através da mesma interface. A partir de um objeto KeyStore instanciado é	possível navegar pelos
            certificados digitais contidos no KeyStore por meio dos apelidos destes certificados.
        </para>

        <para>
            O componente visa facilitar o uso de KeyStore em diversos ambientes, seja PKCS#11 ou PKCS#12. A maneira como se carrega um KeyStore PKCS#11, ou seja,
            mantidos em hardware, difere quando trabalhamos com sistemas operacionais diferentes e até mesmo versões de JVM.
        </para>

        <para>
            No ambiente Windows, é possível utilizar a API padrão do sistema operacional de carregamento de KeyStore PKCS#11, evitando ter de conhecer a marca e o driver do
            fabricante, mas para isso precisamos também saber a versão da JVM instalada. Isso é necessário porque na versão 1.6 a implementação JCE já comporta o tratamento nativo na
            plataforma e na versão 1.5 ou inferior é necessário utilizar uma biblioteca para trabalhar com a API nativa do Windows.
        </para>

        <para>
            Em ambiente Unix-like é possível carregar um KeyStore PKCS#11 a partir de um driver específico, mas é preciso saber o fabricante e o caminho do driver no sistema
            operacional. Para carregamento de KeyStore formato PKCS#12, ou seja, em arquivo, o processo de carregamento é o mesmo para os diversos sistemas operacionais.
        </para>
    </section>

    <para>
        As funcionalidades do componente estão acessíveis por meio da fábrica <emphasis>br.gov.frameworkdemoiselle.certificate.keystore.loader.factory.KeyStoreLoaderFactory</emphasis>
        de objetos do tipo <emphasis>br.gov.frameworkdemoiselle.certificate.keystore.loader.KeyStoreLoader.</emphasis>
    </para>
    <para>
        O uso da fábrica é importante, mas não é obrigatório. A importância dela se deve à funcionalidade de descobrir qual a melhor implementação para o carregamento de KeyStore
        baseando-se em configurações. Utilizando a fábrica não é necessário escrever códigos específicos para um determinado sistema operacional, pois a fábrica identifica qual o
        sistema operacional e a versão da JVM para fabricar a melhor implementação.
    </para>

    <para>
        Exemplo de uso da fábrica de objetos KeyStoreLoader
    </para>

    <programlisting role="JAVA"><![CDATA[KeyStoreLoader keyStoreLoader = KeyStoreLoaderFactory.factoryKeyStoreLoader();]]></programlisting>

    <para>
        Exemplo de uso da fábrica de objetos KeyStoreLoader para KeyStore PKCS#12
    </para>

    <programlisting role="JAVA"><![CDATA[KeyStoreLoader keyStoreLoader = KeyStoreLoaderFactory.factoryKeyStoreLoader(new File("/usr/keystore.p12"));]]></programlisting>

    <section>
        <title>Carregamento de KeyStore PKCS#12</title>
        <para>
            Para carregar um KeyStore a partir de uma arquivo no formato PKCS#12 basta utilizar a classe
            <emphasis>br.gov.frameworkdemoiselle.certificate.keystore.loader.implementation.FileSystemKeyStoreLoader.</emphasis>
        </para>

        <para>
            Abaixo temos exemplos de uso.
        </para>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = (new FileSystemKeyStoreLoader(new File("/usr/keystore.p12"))).getKeyStore("password");]]></programlisting>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = KeyStoreLoaderFactory.factoryKeyStoreLoader(new File("/usr/keystore.p12")).getKeyStore("password");]]></programlisting>

    </section>

    <section>
        <title>Carregamento de KeyStore PKCS#11 em ambiente Linux</title>

        <para>
            Para carregar um KeyStore PKCS#11 basta utilizar a classe <emphasis>br.gov.frameworkdemoiselle.certificate.keystore.loader.implementation.DriverKeyStoreLoader.</emphasis>
        </para>

        <para>
            Para configuração de drivers favor acessar a área de Configuração do componente em <xref linkend="lista-drivers"/>.
        </para>

        <para>
            Abaixo temos exemplos de uso.
        </para>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = (new DriverKeyStoreLoader()).getKeyStore("PIN NUMBER");]]></programlisting>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = KeyStoreLoaderFactory.factoryKeyStoreLoader().getKeyStore("PIN NUMBER");]]></programlisting>

        <para>
            Caso se queira instanciar um KeyStore a partir de um driver específico que não esteja na lista de driver configurada, é possível informar o driver como parâmetro para a classe, veja o exemplo:
        </para>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = (new DriverKeyStoreLoader()).getKeyStore("PIN NUMBER", "Pronova", "/usr/lib/libepsng_p11.so");]]></programlisting>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = (new DriverKeyStoreLoader()).getKeyStore("PIN NUMBER", "/usr/lib/libepsng_p11.so");]]></programlisting>

        <important>
            <para>
                Este código também funciona em ambiente Windows, bastando especificar o driver correto a ser utilizado.
            </para>
        </important>

    </section>

    <section>
        <title>Carregamento de KeyStore PKCS#11 em ambiente Windows</title>
        <para>
            Para carregar um KeyStore utilizando a API nativa do Windows basta utilizar a classe <emphasis>br.gov.frameworkdemoiselle.certificate.keystore.loader.implementation.MSKeyStoreLoader.</emphasis>
        </para>

        <para>
            Abaixo temos exemplos de uso.
        </para>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = (new MSKeyStoreLoader()).getKeyStore(null);]]></programlisting>

        <programlisting role="JAVA"><![CDATA[KeyStore keyStore = KeyStoreLoaderFactory.factoryKeyStoreLoader().getKeyStore(null);]]></programlisting>

        <important>
            <para>
                Este recurso só funciona em JVM 1.6 ou superior. Caso deseje executar em um ambiente com o Java mais antigo, desabilite a camada MSCAPI e faça o acesso
                diretamente pelo driver. Para saber como proceder, consulte <xref linkend="disable_layer_mscapi" />.
            </para>
        </important>
    </section>
</chapter>
